{"version":3,"sources":["assets/location.svg","assets/snakes-ladders-board.png","components/cube/Cube.js","components/form/Form.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cube","props","faces","changeDice","randomInt","getRandomInt","setState","cubeFaceClass","setTimeout","onClick","min","max","Math","ceil","floor","random","state","this","className","Component","Form","handlePositionChange","event","inputCurrentPosition","target","value","handleDiceChange","diceOutcome","handleSubmit","parseInt","onFormSubmit","alert","onDiceTossed","resetApp","type","onChange","Ladders","top","foot","Snakes","head","tail","App","startGame","prevState","currentPosition","currentLeft","diceNumber","i","moveLocationIcon","checkForSnakes","checkForLadders","console","log","output","move","moveVertical","moveHorizontal","currentBottom","forEach","snake","goToPosition","ladder","position","bottom","left","includes","src","playboard","alt","locationIcon","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c1fbf9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/location.ea573223.svg\";","module.exports = __webpack_public_path__ + \"static/media/snakes-ladders-board.0cf046b3.png\";","import React, { Component } from \"react\";\nimport './Cube.css';\n\nclass Cube extends Component {\n    faces = ['front', 'back', 'right', 'left', 'top', 'bottom'];\n    constructor(props) {\n        super(props);\n        this.state = { cubeFaceClass: '' };\n    }\n\n    componentDidMount() {\n        this.setState({ cubeFaceClass: 'show-' + this.faces[0] });\n    }\n\n    changeDice = () => {\n        let randomInt = this.getRandomInt(1,6);\n        this.setState({ cubeFaceClass: 'rotate-cube' });\n        setTimeout(() => this.setState({ cubeFaceClass: 'show-' + this.faces[randomInt - 1] }),800);\n        this.props.onClick(randomInt);\n    }\n\n    getRandomInt = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    render() {\n        let { cubeFaceClass } = this.state;\n        return (\n            <div className=\"scene\">\n                <div className={\"cube \" + cubeFaceClass} onClick={this.changeDice}>\n                    <div className=\"cube__face cube__face--front\">1</div>\n                    <div className=\"cube__face cube__face--back\">2</div>\n                    <div className=\"cube__face cube__face--right\">3</div>\n                    <div className=\"cube__face cube__face--left\">4</div>\n                    <div className=\"cube__face cube__face--top\">5</div>\n                    <div className=\"cube__face cube__face--bottom\">6</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Cube;","import React, { Component } from \"react\";\nimport Cube from './../cube/Cube';\nimport './Form.css';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { diceOutcome: '', inputCurrentPosition: '' }\n    }\n\n    handlePositionChange = (event) => {\n        this.setState({ inputCurrentPosition: event.target.value });\n    }\n\n    handleDiceChange = (event) => {\n        this.setState({ diceOutcome: event.target.value });\n    }\n\n    handleSubmit = () => {\n        let inputCurrentPosition = parseInt(this.state.inputCurrentPosition), diceOutcome = parseInt(this.state.diceOutcome);\n\n        if (inputCurrentPosition >= 1 && inputCurrentPosition <= 100) {\n            if (diceOutcome >= 1 && diceOutcome <= 6) {\n                this.props.onFormSubmit(inputCurrentPosition, diceOutcome);\n            } else {\n                alert('Please enter valid dice outcome')\n            }\n        } else {\n            alert('Please enter valid Current Position')\n        }\n    }\n\n    render() {\n        let { inputCurrentPosition, diceOutcome } = this.state, { onDiceTossed, resetApp } = this.props;\n\n        return (\n            <section className=\"form\">\n                <div className=\"input-area\">\n                    <div>\n                        <label>\n                            Current Position:\n                    <input type=\"text\" value={inputCurrentPosition} onChange={this.handlePositionChange} />\n                        </label>\n                    </div>\n                    <div>\n                        <label>\n                            Dice Outcome:\n                    <input type=\"text\" value={diceOutcome} onChange={this.handleDiceChange} />\n                        </label>\n                    </div>\n                    <div>\n                        <input className=\"submit-btn\" type=\"button\" value=\"Submit\" onClick={this.handleSubmit} />\n                        <input className=\"reset-btn\" type=\"button\" value=\"Reset\" onClick={resetApp} />\n                    </div>\n                </div>\n\n                <div className=\"dice-container\">\n                    <Cube onClick={onDiceTossed} />\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Form;","export const Ladders = [\n    { top: 33, foot: 7 },\n    { top: 85, foot: 37 },\n    { top: 72, foot: 51 },\n    { top: 99, foot: 63 }\n];\n\nexport const Snakes = [\n    { head: 36, tail: 19 },\n    { head: 65, tail: 35 },\n    { head: 87, tail: 32 },\n    { head: 97, tail: 21 }\n];","import React, { Component } from 'react';\nimport playboard from './assets/snakes-ladders-board.png';\nimport locationIcon from './assets/location.svg';\nimport './App.css';\nimport Form from './components/form/Form';\nimport { Ladders, Snakes } from './config';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { startGame: false, currentPosition: 0, currentBottom: 0, currentLeft: 0, move: 'right', output: '' };\n  }\n\n  // Start the game\n  startGame = () => {\n    this.setState(prevState => ({ startGame: true, currentPosition: 0, currentLeft: prevState.currentLeft - 10 }));\n  }\n\n  // When dice is tossed\n  onDiceTossed = (diceNumber) => {\n    let { currentPosition } = this.state;\n\n    if (currentPosition + diceNumber <= 100) {\n      let i = 1;\n      while (i <= diceNumber) {\n        setTimeout(() => {\n          this.setState(prevState => ({ currentPosition: prevState.currentPosition + 1 }));\n          this.moveLocationIcon();\n\n        }, 500 * i);\n        i++;\n      }\n\n      // After final movement\n      setTimeout(() => {\n        this.checkForSnakes();\n        this.checkForLadders();\n\n        console.log('New position:', this.state.currentPosition);\n\n        this.setState(prevState => ({output: `${prevState.output} \\n New position:: ${this.state.currentPosition}`}));\n      }, (500 * diceNumber) + 500);\n    }\n  }\n\n  // Move location-icon to currentPosition\n  moveLocationIcon = () => {\n    let { currentPosition } = this.state;\n    if (currentPosition <= 100) {\n      switch (currentPosition) {\n        case 21:\n        case 41:\n        case 61:\n        case 81:\n          this.setState({ move: 'right' });\n          this.moveVertical();\n          break;\n        case 11:\n        case 31:\n        case 51:\n        case 71:\n        case 91:\n          this.setState({ move: 'left' });\n          this.moveVertical();\n          break;\n        default:\n          this.moveHorizontal();\n      }\n    }\n  }\n\n  // Move location-icon horizontally\n  moveHorizontal = () => {\n    let { move } = this.state;\n    if (move === 'right') {\n      this.setState((prevState) => ({ currentLeft: prevState.currentLeft + 10 }));\n    } else {\n      this.setState((prevState) => ({ currentLeft: prevState.currentLeft - 10 }));\n    }\n  }\n\n  // Move location-icon vertically\n  moveVertical = () => {\n    this.setState(prevState => ({ currentBottom: prevState.currentBottom + 10 }));\n  }\n\n  // Checking for snakes\n  checkForSnakes = () => {\n    let { currentPosition } = this.state;\n    Snakes.forEach(snake => {\n      if (snake.head === currentPosition) {\n        this.goToPosition(snake.tail);\n      }\n    });\n  }\n\n  // Cheking for ladders\n  checkForLadders = () => {\n    let { currentPosition } = this.state;\n    Ladders.forEach(ladder => {\n      if (ladder.foot === currentPosition) {\n        this.goToPosition(ladder.top);\n      }\n    });\n  }\n\n  // Go to position\n  goToPosition = (position) => {\n    let bottom = parseInt(position / 10),\n      left = position % 10;\n\n    bottom -= left === 0 ? 1 : 0;\n\n\n    this.setState({ currentPosition: position, currentBottom: bottom * 10 });\n\n    if ([0, 2, 4, 6, 8].includes(bottom)) {\n      this.setState({ move: 'right', currentLeft: (left === 0 ? 9 : (left - 1)) * 10 });\n\n    } else {\n      this.setState({ move: 'left', currentLeft: (left === 0 ? 0 : (10 - left)) * 10 });\n    }\n  }\n\n  // On form submit\n  onFormSubmit = (position, diceOutcome) => {\n    this.goToPosition(position);\n    this.onDiceTossed(diceOutcome);\n\n    console.log('Current position: ', position);\n    console.log('Dice Outcome: ', diceOutcome);\n\n\n  this.setState({output: `Current position: ${position} \\n Dice Outcome: ${diceOutcome}`});\n  }\n\n  // Reset app\n  resetApp = () => {\n    this.setState({ startGame: false, currentPosition: 0, currentBottom: 0, currentLeft: 0, move: 'right', output: '' });\n  }\n\n  render() {\n    const { startGame, currentBottom, currentLeft, output } = this.state;\n    return (\n      <div className=\"container\">\n        <header className=\"header\">\n          <p>Snakes and Ladders</p>\n        </header>\n\n        <div className=\"play-board\">\n          <img src={playboard} className=\"play-board-img\" alt=\"play-board\" />\n          {startGame && <img src={locationIcon} className=\"play-location-img\" style={{ bottom: 3 + currentBottom + '%', left: 4 + currentLeft + '%' }} alt=\"location\" />}\n\n          <div className=\"initial-box-container\">\n            <div className=\"initial-box\">\n              00\n            </div>\n          </div>\n        </div>\n\n        <div className=\"input-board\">\n          {!startGame &&\n            <div className=\"start-btn\" onClick={this.startGame}>\n              <p>START <img src={locationIcon} className=\"location-img\" alt=\"location\" /> </p>\n            </div>\n          }\n          {startGame && <Form\n            onFormSubmit={this.onFormSubmit}\n            onDiceTossed={this.onDiceTossed}\n            resetApp={this.resetApp} />}\n        </div>\n\n        <div className=\"output-board\">\n          <p>{output}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}